#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cli:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */
const socketIO = require('socket.io');
var server = http.createServer(app);
const io = socketIO(server);

var serverData = [];
exports.serverData = function(){return serverData};

io.sockets.on('connection', function(socket) {
  
  // when a 'send message' message is sent along with some data...
  socket.on('send message', function(data) {
    // use the web sockets to emit the message to everyone else
    io.sockets.emit('new message', data);
    
    console.log('Someone posted:', data); // make a log entry
    //var dados = data.split(',');
    //var tabela = {};
    //tabela.link_imagem = dados[0];
    //tabela.titulo = dados[1];
    //tabela.descricao = dados[2];
    //tabela.tema = dados[3];
    //tabela.link_noticia = dados[4];
    serverData.push(data);
  });

  socket.on('deletar', function(codigo){
    console.log(serverData);
    var i=0;
    for(var t of serverData){
      if(t.codigo == codigo){ serverData.splice(i,1);}
      i++;
    }
    console.log("\napos remocao\n:");
    console.log(serverData);
  });
  
  //socket.on('reload data', function(){
  //  socket.emit('data fill', serverData);
  //});
  

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
